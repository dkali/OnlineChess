@using System.Collections.Generic
@using OnlineChess.Data
@inject LobbyService lobbyService
@inject PlayerDataService playerDataService
@inject SQLiteDataService sqliteDb

<div class="debug">
    <div>Host: @sqliteDb.GetPlayerName(GSession.OwnerId)</div>
    @if (GSession.SessionState == SessionState.Preparation)
    {
        @if (playerDataService.AccountId == GSession.OwnerId)
        {
            <div>Select oponent: <RadzenDropDown AllowClear="true" TValue="string" Style="width:300px" 
                                    Data=@(GSession.Players.
                                        Where(playerId => playerId != GSession.OwnerId).
                                        Select(playerId => @sqliteDb.GetPlayerName(playerId)))
                                    Change=@(args => OnPlayerChange(args, "DropDown")) /></div>
            <div>Select White player: <RadzenDropDown AllowClear="true" TValue="string" Style="width:300px"
                                    Data=@(new List<string> {GSession.OwnerId, GSession.OponentId}.
                                        Select(playerId => @sqliteDb.GetPlayerName(playerId)))
                                    Change=@(args => OnSideChange(args, "DropDown")) /></div>
            <Button @onclick="StartGame" disabled="@_startGameBtnDisabled">Start Game</Button>
        }
    }
    else
    {
        @if (GSession.WhiteTurn)
        {
            <div><b>White player: @sqliteDb.GetPlayerName(@GSession.WhitePlayer)</b></div>
        }
        else
        {
            <div>White player: @sqliteDb.GetPlayerName(@GSession.WhitePlayer)</div>
        }

        @if (GSession.EatenBlacks != string.Empty)
        {
            <div>@GSession.EatenBlacks</div>
        }
        
        @if (!GSession.WhiteTurn)
        {
            <div><b>Black player: @sqliteDb.GetPlayerName(@GSession.BlackPlayer)</b></div>
        }
        else
        {
            <div>Black player: @sqliteDb.GetPlayerName(@GSession.BlackPlayer)</div>
        }

        @if (GSession.EatenWhites != string.Empty)
        {
            <div>@GSession.EatenWhites</div>
        }

        @if (GSession.Winner != string.Empty)
        {
            <div><b>Winner is @sqliteDb.GetPlayerName(@GSession.Winner)</b></div>
        }
    }

    <div>players in room:</div>
    @foreach (string playerId in GSession.Players)
    {
        <div> * @sqliteDb.GetPlayerName(playerId)</div>
    }
    <Button @onclick="LeaveGame">Leave Game</Button>
</div>

@code
{
    private GameSession GSession { get; set; }
    private string oponentName { get; set; }
    private string _whitePlayerId { get; set; }
    private bool _startGameBtnDisabled, _oponentSelected, _sideSelected;

    protected override void OnInitialized()
    {
       GSession = lobbyService.GetGameSession(playerDataService.AccountId);
       _startGameBtnDisabled = true;
       _oponentSelected = false;
       _sideSelected = false;
    }

    public void ReRender()
    {
        StateHasChanged();
    }

    private async Task LeaveGame()
    {
        playerDataService.playerUiState = PlayerUiState.InLobby;
        await lobbyService.LeaveGame(GSession.SessionId, playerDataService.AccountId);
    }

    private async Task StartGame()
    {
        GSession.WhitePlayer = _whitePlayerId == GSession.OwnerId ? GSession.OwnerId : GSession.OponentId;
        GSession.BlackPlayer = _whitePlayerId == GSession.OwnerId ? GSession.OponentId : GSession.OwnerId;
        lobbyService.StartGame(GSession.SessionId);
    }

    private void OnPlayerChange(object value, string name)
    {
        if (value != null)
        {
            oponentName = value.ToString();
            GSession.OponentId = GSession.Players.Where(playerId => 
                @sqliteDb.GetPlayerName(playerId) == oponentName).ToList()[0];
            _oponentSelected = true;
        }
        else
        {
            oponentName = string.Empty;
            _oponentSelected = true;
        }
        _startGameBtnDisabled = !(_oponentSelected && _sideSelected);
    }

    private void OnSideChange(object value, string name)
    {
        _sideSelected = value == null ? false : true;
        string tmp = sqliteDb.GetPlayerName(GSession.OwnerId);
        _whitePlayerId = (sqliteDb.GetPlayerName(GSession.OwnerId) == (string)value ? GSession.OwnerId : GSession.OponentId);
        _startGameBtnDisabled = !(_oponentSelected && _sideSelected);
    }
}