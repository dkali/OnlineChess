@page "/"

@inject PlayerDataService playerDataService
@inject LobbyService lobbyService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject SQLiteDataService sqliteDb
@using System
@using Microsoft.AspNetCore.SignalR.Client
@using OnlineChess.Data
@implements IAsyncDisposable

@if (string.IsNullOrEmpty(playerName))
{
    Console.WriteLine("[OC] redirect to login");
    NavigationManager.NavigateTo("/login");
}

<h1>Hello, @playerName!</h1>

Active Players:

<table class="table">
    <thead>
        <tr>
            <th>Player name</th>
            @* <th>Connection ID </th>
            <th>Status</th> *@
            @* <th>Send Invite</th> *@
        </tr>
    </thead>
    <tbody>
        @foreach (var playerName in playerList)
        {
            <tr>
                <td>@playerName</td>
                @* <td>@player.ConnectionId</td>
                <td>@player.State</td> *@
                @* <td>@forecast.Summary</td> *@
            </tr>
        }
    </tbody>
</table>    

@* <SurveyPrompt Title="How is Blazor working for you?" /> *@

@code {
    private HubConnection hubConnection;
    public string playerName;
    private List<string> playerList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        playerName = sqliteDb.GetPlayerName(playerDataService.accountId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/lobbyhub"))
            .Build();

        hubConnection.On<List<string>>("RefreshPlayerList", (players) =>
        {
            playerList = players;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (!string.IsNullOrEmpty(playerName))
            lobbyService.AddPlayer(playerDataService.accountId, hubConnection.ConnectionId, playerName);
    }

    @* async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput); *@

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}