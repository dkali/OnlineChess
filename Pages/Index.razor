@page "/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System
@using Microsoft.AspNetCore.SignalR.Client
@using OnlineChess.Data
@using Microsoft.Extensions.Logging
@inject PlayerDataService playerDataService
@inject LobbyService lobbyService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject SQLiteDataService sqliteDb
@inject ProtectedLocalStorage BrowserStorage
@inject NotifierService Notifier
@inject ILogger<Index> logger
@inject DialogService DialogService
@implements IAsyncDisposable

@switch (playerDataService.playerUiState)
{
    case PlayerUiState.None:
        <p><em>Loading...</em></p>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" ></RadzenProgressBar>
        break;

    case PlayerUiState.InLobby:
        <Lobby PlayerList="@_playerList" PlayerName="@playerName"></Lobby>
        break;

    case PlayerUiState.InGame:
        <GameView @ref="_gameViewComponent"></GameView>
        break;
}

@code {
    private HubConnection hubConnection;
    private List<string> _playerList = new List<string>();
    private string playerName;
    @* private (string key, int value) lastNotification; *@
    private GameView _gameViewComponent;

    protected override void OnInitialized()
    {
        Notifier.Notify += OnNotify;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (string.IsNullOrEmpty(playerDataService.AccountId))
        {
            // read cookie
            var result = await BrowserStorage.GetAsync<string>("accountId");
            string accountId = result.Success ? result.Value : "";
            
            if (string.IsNullOrEmpty(accountId))
            {
                logger.LogInformation("[OC] redirect to login");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                playerDataService.AccountId = accountId;
            }
        }

        playerName = sqliteDb.GetPlayerName(playerDataService.AccountId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/lobbyhub"))
            .Build();

        hubConnection.On<List<string>>("RefreshPlayerList", (players) =>
        {
            _playerList = players;
            StateHasChanged();
        });

        hubConnection.On<string>("ReRenderGameView", (targetComponent) => 
        {
            _gameViewComponent.ReRender(targetComponent);
        });

        hubConnection.On<string>("KickPlayer", (playerId) => 
        {
           if (playerId == playerDataService.AccountId)
           {
               playerDataService.playerUiState = PlayerUiState.InLobby;
           } 
        });

        hubConnection.On<string>("PlayerLeft", (playerId) => 
        {
            DialogService.Confirm($"Player {sqliteDb.GetPlayerName(playerId)} left the game", "Oops", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        });

        await hubConnection.StartAsync();
        lobbyService.AddPlayer(playerDataService.AccountId, hubConnection.ConnectionId);

        playerDataService.playerUiState = lobbyService.PlayerInGameSession(playerDataService.AccountId) ?
            PlayerUiState.InGame : PlayerUiState.InLobby;
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async Task OnNotify(string key, int value)
    {
        await InvokeAsync(() =>
        {
            @* lastNotification = (key, value); *@
            StateHasChanged();
            lobbyService.RefreshPLayerList(); // may be not needed
        });
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        Notifier.Notify -= OnNotify;
    }
}